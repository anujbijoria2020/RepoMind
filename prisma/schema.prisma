generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imageUrl       String?
  firstName      String?
  lastName       String?
  emailAddress   String          @unique
  credits        Int             @default(150)
  payments       Payment[]
  questionsAsked Question[]
  userToProject  UserToProject[]
}

model Project {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  name                 String
  githubUrl            String
  githubToken          String?
  deletedAt            DateTime?
  Commits              Commit[]
  meetings             Meeting[]
  questions            Question[]
  SourceCodeEmbeddings SourceCodeEmbedding[]
  userToProject        UserToProject[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model SourceCodeEmbedding {
  id               String                 @id @default(cuid())
  summaryEmbedding Unsupported("vector")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project                @relation(fields: [projectId], references: [id])
}

model Question {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  question       String
  answer         String
  fileReferences Json?
  projectId      String
  userId         String
  project        Project  @relation(fields: [projectId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model Commit {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  projectId          String
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
  project            Project  @relation(fields: [projectId], references: [id])
}

model Meeting {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  meetingUrl String
  projectId  String
  status     MeetingStatus @default(PROCESSING)
  name       String
  issues     Issue[]
  project    Project    @relation(fields: [projectId], references: [id],onDelete: Cascade)
}

model Issue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  start     String
  end       String
  gist      String
  headline  String
  summary   String
  meetingId String
  meeting   Meeting  @relation(fields: [meetingId], references: [id],onDelete: Cascade)
}

model Payment {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  paymentId String?       @unique
  orderId   String        @unique
  currency  String
  credits   Int
  status    PaymentStatus
  reciept   String
  userId    String
  amount    Int
  user      User          @relation(fields: [userId], references: [id])
}

enum MeetingStatus {
  PENDING
  PROCESSING
  COMPLETED
}

enum PaymentStatus {
  created
  captured
  failed
}
